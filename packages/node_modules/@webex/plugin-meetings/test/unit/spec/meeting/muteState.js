import sinon from 'sinon';
import {assert} from '@webex/test-helper-chai';
import MockWebex from '@webex/test-helper-mock-webex';
import Meetings from '@webex/plugin-meetings';
import MeetingUtil from '@webex/plugin-meetings/src/meeting/util';
import createMuteState from '@webex/plugin-meetings/src/meeting/muteState';
import Media from '@webex/plugin-meetings/src/media/index';

describe('plugin-meetings', () => {
  let meeting;
  let audio;
  let video;

  const fakeLocus = {info: 'this is a fake locus'};

  beforeEach(() => {
    // todo not sure if this stuff is needed...
    const webex = new MockWebex({
      children: {
        meetings: Meetings
      }
    });

    webex.meetings.clientRegion = {
      countryCode: 'US',
      regionCode: 'WEST-COAST'
    };
    // ----------------------------------------

    meeting = {
      mediaProperties: {
        audioTrack: 'fake audio track',
        videoTrack: 'fake video track',
        audio: {},
        video: {},
        locusInfo: {
          onFullLocus: sinon.stub() // todo: or use sinon.mock()
        },
        members: {
          muteMember: sinon.stub().resolves()
        }
      }
    };
    audio = createMuteState('audio', meeting, {sendAudio: true});
    video = createMuteState('video', meeting, {sendVideo: true});

    MeetingUtil.remoteUpdateAudioVideo = sinon.stub().resolves(fakeLocus);
    Media.setLocalTrack = sinon.stub();
  });

  describe('mute state library', () => {
    describe('#handleClientRequest', () => {
      it('muting/unmuting enables/disables the audio local track ', async () => {
        // mute
        audio.handleClientRequest(true);
        assert.calledWith(Media.setLocalTrack, false, meeting.mediaProperties.audioTrack);

        // unmute
        audio.handleClientRequest(false);
        assert.calledWith(Media.setLocalTrack, true, meeting.mediaProperties.audioTrack);

        // even when calling unmute when it's already unmuted should still call setLocalTrack
        audio.handleClientRequest(false);
        assert.calledWith(Media.setLocalTrack, true, meeting.mediaProperties.audioTrack);
      });
      it('muting/unmuting enables/disables the video local track ', async () => {
        // mute
        video.handleClientRequest(true);
        assert.calledWith(Media.setLocalTrack, false, meeting.mediaProperties.videoTrack);

        // unmute
        video.handleClientRequest(false);
        assert.calledWith(Media.setLocalTrack, true, meeting.mediaProperties.videoTrack);

        // even when calling unmute when it's already unmuted should still call setLocalTrack
        video.handleClientRequest(false);
        assert.calledWith(Media.setLocalTrack, true, meeting.mediaProperties.videoTrack);
      });
    });
  });
});
