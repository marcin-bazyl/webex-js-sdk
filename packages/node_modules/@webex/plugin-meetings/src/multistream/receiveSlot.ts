import {MediaConnection as MC} from '@webex/internal-media-core';

import EventsScope from '../common/events/events-scope';

export const ReceiveSlotEvents = {
  MediaStarted: 'mediaStarted',
  MediaStopped: 'mediaStopped',
  SourceUpdate: 'sourceUpdate',
};

export const {SourceState} = MC;

export type CSI = number;
export type MemberId = string;
export type ReceiveSlotId = string;

let receiveSlotCounter = 0;

export type FindMemberIdCallback = (csi: CSI) => MemberId | undefined;

/**
 * Class representing a receive slot. A single receive slot is able to receive a single track
 * for example some participant's main video or audio
 */
export class ReceiveSlot extends EventsScope {
  private mcReceiveSlot: MC.ReceiveSlot;

  private findMemberIdCallback: FindMemberIdCallback;

  public id: ReceiveSlotId;

  public mediaType: MC.MediaType;

  public memberId?: MemberId;

  public csi?: CSI;

  public mediaState: 'stopped' | 'started';

  public sourceState: MC.SourceState;

  /**
   * constructor - don't use it directly, you should always use meeting.receiveSlotManager.allocateSlot()
   * to create any receive slots
   *
   * @param {MC.MediaType} mediaType
   * @param {MC.ReceiveSlot} mcReceiveSlot
   * @param {FindMemberIdCallback} findMemberIdCallback callback for finding memberId for given CSI
   */
  constructor(mediaType: MC.MediaType, mcReceiveSlot: MC.ReceiveSlot, findMemberIdCallback: FindMemberIdCallback) {
    super();

    receiveSlotCounter += 1;

    this.findMemberIdCallback = findMemberIdCallback;
    this.mediaType = mediaType;
    this.mcReceiveSlot = mcReceiveSlot;
    this.mediaState = 'stopped';
    this.sourceState = 'no source';
    this.id = `r${receiveSlotCounter}`;

    this.setupEventListeners();
    console.log(`marcin: created ReceiveSlot for ${mediaType}`);
  }

  /**
   * registers event handlers with the underlying ReceiveSlot
   */
  setupEventListeners() {
    this.mcReceiveSlot.on(MC.ReceiveSlotEvents.MediaStarted, () => {
      this.mediaState = 'started';

      console.log(`marcin3: got mediaStarted on receive slot ${this.id}, this.mediaType=${this.mediaType} state=${this.sourceState}`);
      this.emit({
        file: 'meeting/receiveSlot',
        function: 'setupEventListeners'
      },
      ReceiveSlotEvents.MediaStarted,
      {
        stream: this.mcReceiveSlot.stream
      });
    });

    this.mcReceiveSlot.on(MC.ReceiveSlotEvents.MediaStopped, () => {
      this.mediaState = 'stopped';

      console.log(`marcin3: got mediaStopped on receive slot ${this.id}, this.mediaType=${this.mediaType} state=${this.sourceState}`);
      this.emit({
        file: 'meeting/receiveSlot',
        function: 'setupEventListeners'
      },
      ReceiveSlotEvents.MediaStopped,
      {});
    });

    this.mcReceiveSlot.on(MC.ReceiveSlotEvents.SourceUpdate, (state: MC.SourceState, csi?: number) => {
      console.log(`marcin3: got source update this.mediaType=${this.mediaType} csi=${csi} state=${state}`);
      this.memberId = csi ? this.findMemberIdCallback(csi) : undefined;
      this.csi = csi;
      this.sourceState = state;

      this.emitSourceStateUpdate();
    });
  }

  /**
   * The MediaStream object associated with this slot.
   *
   * @returns {MediaStream} The MediaStreamTrack.
   */
  get stream(): MediaStream {
    return this.mcReceiveSlot.stream;
  }

  /**
   * The underlying WCME receive slot
   */
  get wcmeReceiveSlot(): MC.ReceiveSlot {
    return this.mcReceiveSlot;
  }

  /**
   * Resets the source state to the default 'no source' value.
   * This function should be called on receive slots that are
   * no longer part of a media request. It's needed because WCME
   * does not send any more events on such slots, so the sourceState
   * value would not represent the truth anymore.
   */
  public resetSourceState() {
    this.sourceState = 'no source';
    this.csi = undefined;
    this.memberId = undefined;
  }

  /**
   * Emits the ReceiveSlotEvents.SourceUpdate event based on the current
   * cached values for sourceState, csi and memberId
   */
  private emitSourceStateUpdate() {
    this.emit({
      file: 'meeting/receiveSlot',
      function: 'setupEventListeners'
    },
    ReceiveSlotEvents.SourceUpdate,
    {
      state: this.sourceState,
      csi: this.csi,
      memberId: this.memberId
    });
  }
}
